/*
 * To change this license header, choose License Headers in Project Properties.
 * To change this template file, choose Tools | Templates
 * and open the template in the editor.
 */
package favoritebooks;

import java.io.BufferedReader;
import java.io.File;
import java.io.FileNotFoundException;
import java.io.FileReader;
import java.io.IOException;
import java.util.logging.Level;
import java.util.logging.Logger;
import javax.swing.JFrame;
import javax.swing.JOptionPane;

/**
 *
 * @author pc
 */
public class ListBooks extends javax.swing.JFrame {

    /**
     * Creates new form ListBooks
     */
    public ListBooks() {
        initComponents();
    }

    /**
     * This method is called from within the constructor to initialize the form.
     * WARNING: Do NOT modify this code. The content of this method is always
     * regenerated by the Form Editor.
     */
    @SuppressWarnings("unchecked")
    // <editor-fold defaultstate="collapsed" desc="Generated Code">//GEN-BEGIN:initComponents
    private void initComponents() {

        buttonGroup1 = new javax.swing.ButtonGroup();
        jLabel1 = new javax.swing.JLabel();
        author = new javax.swing.JTextField();
        category = new javax.swing.JTextField();
        authorButton = new javax.swing.JRadioButton();
        categoryButton = new javax.swing.JRadioButton();
        jScrollPane1 = new javax.swing.JScrollPane();
        jTextArea1 = new javax.swing.JTextArea();
        jButton1 = new javax.swing.JButton();
        sortButton = new javax.swing.JRadioButton();
        jButton2 = new javax.swing.JButton();

        setDefaultCloseOperation(javax.swing.WindowConstants.EXIT_ON_CLOSE);

        jLabel1.setFont(new java.awt.Font("Tahoma", 1, 15)); // NOI18N
        jLabel1.setText("List the book(s)");

        author.setEditable(false);

        category.setEditable(false);

        buttonGroup1.add(authorButton);
        authorButton.setText("respect to author name");
        authorButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                authorButtonActionPerformed(evt);
            }
        });

        buttonGroup1.add(categoryButton);
        categoryButton.setText("respect to category");
        categoryButton.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                categoryButtonActionPerformed(evt);
            }
        });

        jTextArea1.setEditable(false);
        jTextArea1.setColumns(20);
        jTextArea1.setRows(5);
        jScrollPane1.setViewportView(jTextArea1);

        jButton1.setText("List Book(s)");
        jButton1.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton1ActionPerformed(evt);
            }
        });

        sortButton.setText("Sort by rating");

        jButton2.setText("Back to Menu");
        jButton2.addActionListener(new java.awt.event.ActionListener() {
            public void actionPerformed(java.awt.event.ActionEvent evt) {
                jButton2ActionPerformed(evt);
            }
        });

        javax.swing.GroupLayout layout = new javax.swing.GroupLayout(getContentPane());
        getContentPane().setLayout(layout);
        layout.setHorizontalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addGap(22, 22, 22)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                    .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 495, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 146, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addGroup(layout.createSequentialGroup()
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.TRAILING)
                            .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)
                            .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                .addComponent(authorButton)
                                .addComponent(categoryButton)))
                        .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                            .addGroup(layout.createSequentialGroup()
                                .addGap(29, 29, 29)
                                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
                                    .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 303, javax.swing.GroupLayout.PREFERRED_SIZE)
                                    .addComponent(sortButton)))
                            .addGroup(javax.swing.GroupLayout.Alignment.TRAILING, layout.createSequentialGroup()
                                .addGap(200, 200, 200)
                                .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 132, javax.swing.GroupLayout.PREFERRED_SIZE)))))
                .addContainerGap(29, Short.MAX_VALUE))
        );
        layout.setVerticalGroup(
            layout.createParallelGroup(javax.swing.GroupLayout.Alignment.LEADING)
            .addGroup(layout.createSequentialGroup()
                .addContainerGap()
                .addComponent(jLabel1, javax.swing.GroupLayout.PREFERRED_SIZE, 25, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(16, 16, 16)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(author, javax.swing.GroupLayout.PREFERRED_SIZE, 31, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(authorButton))
                .addGap(30, 30, 30)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(category, javax.swing.GroupLayout.PREFERRED_SIZE, 30, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(categoryButton))
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.UNRELATED)
                .addComponent(sortButton)
                .addPreferredGap(javax.swing.LayoutStyle.ComponentPlacement.RELATED, 17, Short.MAX_VALUE)
                .addGroup(layout.createParallelGroup(javax.swing.GroupLayout.Alignment.BASELINE)
                    .addComponent(jButton1, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE)
                    .addComponent(jButton2, javax.swing.GroupLayout.PREFERRED_SIZE, 39, javax.swing.GroupLayout.PREFERRED_SIZE))
                .addGap(31, 31, 31)
                .addComponent(jScrollPane1, javax.swing.GroupLayout.PREFERRED_SIZE, 116, javax.swing.GroupLayout.PREFERRED_SIZE)
                .addGap(24, 24, 24))
        );

        pack();
        setLocationRelativeTo(null);
    }// </editor-fold>//GEN-END:initComponents

    
    
    
     private void author(String aut) throws FileNotFoundException, IOException{
         
         File inputFile = new File("books.txt");
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
        int count=0;   
        String currentLine;
        String result= "";
        
        while((currentLine = reader.readLine()) != null) {
             String a = currentLine.split(",")[3].toLowerCase();
   
            if(a.contains(aut.toLowerCase())){
                String title = currentLine.split(",")[1];
                String desp = currentLine.split(",")[8];
                result = "Title: " + title + "\n" + "Short Description: " + desp;    
            }
        }
        
        if(result==""){
            JOptionPane.showMessageDialog(null, "The book of the author you entered could not be found.");
        }
         jTextArea1.setText(result);  
         //replaceAll("\\s+", "");

     }
     
     private void category(String aut) throws FileNotFoundException, IOException{
         
        File inputFile = new File("books.txt");
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
       
        String currentLine;
        String result= "";
        
        while((currentLine = reader.readLine()) != null) {
             String a = currentLine.split(",")[2].toLowerCase();
   
            if(a.contains(aut.toLowerCase())){
                String title = currentLine.split(",")[1];
                
                result += "Book Title: " + title+ "\n";
              }
        }
        
        if(result==""){
            JOptionPane.showMessageDialog(null, "No books were found in the category you entered.");
        }
        jTextArea1.setText(result);
  
     }
     private static int countLines(String str){
      String[] lines = str.split("\r\n|\r|\n");
        return  lines.length;
     }

    private void categorySort(String aut) throws FileNotFoundException, IOException{
         
        File inputFile = new File("books.txt");
        BufferedReader reader = new BufferedReader(new FileReader(inputFile));
       
        String currentLine;
        String result= "";
        String rate="";
        String t="";
        
        while((currentLine = reader.readLine()) != null) {
             String a = currentLine.split(",")[2].toLowerCase();
             
            
             if(a.contains(aut.toLowerCase())){
               
                String title = currentLine.split(",")[1];
                String rt = currentLine.split(",")[5];
                t += "Book Title: " + title+ "\n";
                result += rt +","+ title+ "\n";
              }
        }
        
        if(result==""){
            JOptionPane.showMessageDialog(null, "No books were found in the category you entered.");
        } 
         
         
        int a = countLines(result);
        System.out.println("lineee "+a);
        
        if(a == 1){
            jTextArea1.setText(t);
        }
        else{
         int[] arr =new int[a];
         arr[0]=-5;
         
         String[] sort = new String[a];               
         String[] elements = result.split("\n");
        
         for(String str : elements){
             int x=0;
             
             int s = Integer.parseInt(str.split(",")[0]);
             arr[x]=s;
             //System.out.println(str);
             sort[x]= str.split(",")[1];
             
             int temp;
             String tem;
             for(int i=0; i<arr.length-1; i++){
                    for(int j=0;j<arr.length-1;j++){

                        if(arr[j] > arr[j+1]){   

                             temp = arr[j+1];
                             arr[j+1] = arr[j];
                             arr[j]=temp;
                             
                             tem = sort[j+1];
                             sort[j+1]= sort[j];
                             sort[j]=tem;
                             

                        }

                    }

            }

             rate += str + "\n";
             x++;
         }
         
         
         
        String[] b = new String[a];
        int j = a;
        for (int i = 0; i < a; i++) {
            b[j - 1] = sort[i];
            j = j - 1;
            
        }
        
         jTextArea1.append("Book Titles sorted by their rating: \n");
        for (int k = 0; k < a; k++) {
            
             System.out.println(b[k]);
             jTextArea1.append(b[k]+ "\n");
        }

        }
  }
     
     public static boolean countLetter(String string) {
       int intValue;
       
       int count = 0;    
            
            
        for(int i = 0; i < string.length(); i++) {    
            if(string.charAt(i) != ' ')    
                count++;    
        } 
        
        if(count<3){
            JOptionPane.showMessageDialog(null, "You must enter at least three letter for search");
            return false;
        }
        else
            return true;
       
     }	
     
     
    private void jButton2ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton2ActionPerformed
         AfterLogIn afterlogIn = new AfterLogIn();
         this.setVisible(false);
         afterlogIn.setVisible(true);
         afterlogIn.setDefaultCloseOperation(JFrame.EXIT_ON_CLOSE);
    }//GEN-LAST:event_jButton2ActionPerformed

    private void jButton1ActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_jButton1ActionPerformed
         if(!authorButton.isSelected()&& !categoryButton.isSelected()){
            JOptionPane.showMessageDialog(null,"You must to choose one of the buttons!");
         }
         
         
         if(authorButton.isSelected()){
             if(!author.getText().isEmpty()){
                 String aut = author.getText();
                 
                 if(countLetter(aut)){
                     try {
                     author(aut);
                 } catch (IOException ex) {
                     Logger.getLogger(ListBooks.class.getName()).log(Level.SEVERE, null, ex);
                 }
                 }
             }
             else{
            JOptionPane.showMessageDialog(null,"You left a field blank. Please try again.");
            }
         }
         
         if(categoryButton.isSelected()&& !sortButton.isSelected()){
             if(!category.getText().isEmpty()){
                 String cat = category.getText();
                 
                 if(countLetter(cat)){
                     try {
                         category(cat);
                     } catch (IOException ex) {
                         Logger.getLogger(ListBooks.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }
             }
             else{
            JOptionPane.showMessageDialog(null,"You left a field blank. Please try again.");
            }
         }
         
         if(categoryButton.isSelected()&&sortButton.isSelected()){
             if(!category.getText().isEmpty()){
                 String cat = category.getText();
                 
                 if(countLetter(cat)){
                     try {
                         categorySort(cat);
                     } catch (IOException ex) {
                         Logger.getLogger(ListBooks.class.getName()).log(Level.SEVERE, null, ex);
                     }
                 }
             }
             else{
            JOptionPane.showMessageDialog(null,"You left a field blank. Please try again.");
            }
         }
         
         
         
         
         
    }//GEN-LAST:event_jButton1ActionPerformed

    private void authorButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_authorButtonActionPerformed
            
        if(authorButton.isSelected()){
            category.setText("");
            author.setEnabled(true);
            author.setEditable(true);
            sortButton.setEnabled(false);
        }
    }//GEN-LAST:event_authorButtonActionPerformed

    private void categoryButtonActionPerformed(java.awt.event.ActionEvent evt) {//GEN-FIRST:event_categoryButtonActionPerformed
        if(categoryButton.isSelected()){
            author.setText("");
            category.setEditable(true);
            category.setEditable(true);
            sortButton.setEnabled(true);
        }
    }//GEN-LAST:event_categoryButtonActionPerformed

    /**
     * @param args the command line arguments
     */
    public static void main(String args[]) {
        /* Set the Nimbus look and feel */
        //<editor-fold defaultstate="collapsed" desc=" Look and feel setting code (optional) ">
        /* If Nimbus (introduced in Java SE 6) is not available, stay with the default look and feel.
         * For details see http://download.oracle.com/javase/tutorial/uiswing/lookandfeel/plaf.html 
         */
        try {
            for (javax.swing.UIManager.LookAndFeelInfo info : javax.swing.UIManager.getInstalledLookAndFeels()) {
                if ("Nimbus".equals(info.getName())) {
                    javax.swing.UIManager.setLookAndFeel(info.getClassName());
                    break;
                }
            }
        } catch (ClassNotFoundException ex) {
            java.util.logging.Logger.getLogger(ListBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (InstantiationException ex) {
            java.util.logging.Logger.getLogger(ListBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (IllegalAccessException ex) {
            java.util.logging.Logger.getLogger(ListBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        } catch (javax.swing.UnsupportedLookAndFeelException ex) {
            java.util.logging.Logger.getLogger(ListBooks.class.getName()).log(java.util.logging.Level.SEVERE, null, ex);
        }
        //</editor-fold>

        /* Create and display the form */
        java.awt.EventQueue.invokeLater(new Runnable() {
            public void run() {
                new ListBooks().setVisible(true);
            }
        });
    }

    // Variables declaration - do not modify//GEN-BEGIN:variables
    private javax.swing.JTextField author;
    private javax.swing.JRadioButton authorButton;
    private javax.swing.ButtonGroup buttonGroup1;
    private javax.swing.JTextField category;
    private javax.swing.JRadioButton categoryButton;
    private javax.swing.JButton jButton1;
    private javax.swing.JButton jButton2;
    private javax.swing.JLabel jLabel1;
    private javax.swing.JScrollPane jScrollPane1;
    private javax.swing.JTextArea jTextArea1;
    private javax.swing.JRadioButton sortButton;
    // End of variables declaration//GEN-END:variables
}
